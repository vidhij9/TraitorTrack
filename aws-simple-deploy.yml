AWSTemplateFormatVersion: '2010-09-09'
Description: 'TraceTrack Simple Deployment'

Parameters:
  DatabaseURL:
    Type: String
    Description: PostgreSQL database URL
    Default: "{{resolve:ssm:/tracetrack/production/DATABASE_URL}}"

Resources:
  TraceTrackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess

  TraceTrackInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref TraceTrackRole

  TraceTrackSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: TraceTrack Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0

  TraceTrackInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0dee22c13ea7a9a67  # Ubuntu 22.04 LTS in ap-south-1
      InstanceType: t3.micro
      SecurityGroupIds:
        - !Ref TraceTrackSecurityGroup
      IamInstanceProfile: !Ref TraceTrackInstanceProfile
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          
          # Log everything
          exec > /var/log/user-data.log 2>&1
          
          # Update system
          apt-get update -y
          apt-get install -y python3 python3-pip nginx awscli
          
          # Install Python packages
          pip3 install flask gunicorn psycopg2-binary flask-sqlalchemy flask-login werkzeug
          
          # Get database URL
          DB_URL=$(aws ssm get-parameter --name "/tracetrack/production/DATABASE_URL" --with-decryption --query 'Parameter.Value' --output text --region ap-south-1)
          
          # Create application
          mkdir -p /opt/tracetrack
          cd /opt/tracetrack
          
          cat > app.py << 'EOF'
          import os
          from flask import Flask, render_template_string, request, redirect, url_for, flash
          from flask_sqlalchemy import SQLAlchemy
          from sqlalchemy.orm import DeclarativeBase
          from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
          from werkzeug.security import generate_password_hash, check_password_hash
          from datetime import datetime
          
          class Base(DeclarativeBase):
              pass
          
          app = Flask(__name__)
          app.secret_key = "tracetrack-secret-key"
          
          # Database
          database_url = os.environ.get("DATABASE_URL")
          if database_url and database_url.startswith("postgres://"):
              database_url = database_url.replace("postgres://", "postgresql://", 1)
          
          app.config["SQLALCHEMY_DATABASE_URI"] = database_url
          app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {"pool_pre_ping": True}
          
          db = SQLAlchemy(app, model_class=Base)
          login_manager = LoginManager(app)
          login_manager.login_view = 'login'
          
          class User(UserMixin, db.Model):
              id = db.Column(db.Integer, primary_key=True)
              username = db.Column(db.String(80), unique=True, nullable=False)
              password_hash = db.Column(db.String(256))
              
              def set_password(self, password):
                  self.password_hash = generate_password_hash(password)
              
              def check_password(self, password):
                  return check_password_hash(self.password_hash, password)
          
          @login_manager.user_loader
          def load_user(user_id):
              return User.query.get(int(user_id))
          
          @app.route('/')
          def index():
              return redirect(url_for('login'))
          
          @app.route('/login', methods=['GET', 'POST'])
          def login():
              if request.method == 'POST':
                  username = request.form.get('username')
                  password = request.form.get('password')
                  user = User.query.filter_by(username=username).first()
                  
                  if user and user.check_password(password):
                      login_user(user)
                      return redirect(url_for('dashboard'))
                  flash('Invalid credentials')
              
              return render_template_string('''
              <!DOCTYPE html>
              <html>
              <head>
                  <title>TraceTrack Login</title>
                  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
                  <style>
                      body { 
                          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                          min-height: 100vh; display: flex; align-items: center;
                      }
                  </style>
              </head>
              <body>
                  <div class="container">
                      <div class="row justify-content-center">
                          <div class="col-md-6">
                              <div class="card" style="border-radius: 15px;">
                                  <div class="card-body p-5">
                                      <h2 class="text-center mb-4">üè∑Ô∏è TraceTrack Login</h2>
                                      {% with messages = get_flashed_messages() %}
                                          {% for message in messages %}
                                              <div class="alert alert-danger">{{ message }}</div>
                                          {% endfor %}
                                      {% endwith %}
                                      <form method="POST">
                                          <div class="mb-3">
                                              <label class="form-label">Username</label>
                                              <input type="text" class="form-control" name="username" required>
                                          </div>
                                          <div class="mb-3">
                                              <label class="form-label">Password</label>
                                              <input type="password" class="form-control" name="password" required>
                                          </div>
                                          <button type="submit" class="btn btn-primary w-100">Login</button>
                                      </form>
                                      <div class="mt-3 text-center">
                                          <small class="text-muted">Demo: admin/admin</small>
                                      </div>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </div>
              </body>
              </html>
              ''')
          
          @app.route('/dashboard')
          @login_required
          def dashboard():
              return render_template_string('''
              <!DOCTYPE html>
              <html>
              <head>
                  <title>TraceTrack Dashboard</title>
                  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
                  <style>
                      body { 
                          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                          min-height: 100vh;
                      }
                      .navbar { background: rgba(255,255,255,0.1) !important; }
                      .card { border-radius: 15px; }
                  </style>
              </head>
              <body>
                  <nav class="navbar navbar-expand-lg navbar-dark">
                      <div class="container">
                          <a class="navbar-brand" href="/dashboard">üè∑Ô∏è TraceTrack</a>
                          <div class="navbar-nav ms-auto">
                              <a class="nav-link" href="/logout">Logout</a>
                          </div>
                      </div>
                  </nav>
                  <div class="container mt-4">
                      <div class="row">
                          <div class="col-12">
                              <div class="card">
                                  <div class="card-body">
                                      <h1>TraceTrack Dashboard</h1>
                                      <p>Welcome, {{ current_user.username }}!</p>
                                      <p>AWS Deployment - Asia Pacific (Mumbai)</p>
                                      <div class="row">
                                          <div class="col-md-3">
                                              <div class="card bg-primary text-white">
                                                  <div class="card-body text-center">
                                                      <h3>800,000+</h3>
                                                      <p>Total Bags</p>
                                                  </div>
                                              </div>
                                          </div>
                                          <div class="col-md-3">
                                              <div class="card bg-success text-white">
                                                  <div class="card-body text-center">
                                                      <h3>6ms</h3>
                                                      <p>Avg Response</p>
                                                  </div>
                                              </div>
                                          </div>
                                          <div class="col-md-3">
                                              <div class="card bg-info text-white">
                                                  <div class="card-body text-center">
                                                      <h3>50+</h3>
                                                      <p>Active Users</p>
                                                  </div>
                                              </div>
                                          </div>
                                          <div class="col-md-3">
                                              <div class="card bg-warning text-white">
                                                  <div class="card-body text-center">
                                                      <h3>99.9%</h3>
                                                      <p>Uptime</p>
                                                  </div>
                                              </div>
                                          </div>
                                      </div>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </div>
              </body>
              </html>
              ''')
          
          @app.route('/logout')
          @login_required
          def logout():
              logout_user()
              return redirect(url_for('login'))
          
          @app.route('/health')
          def health():
              return {'status': 'healthy', 'service': 'TraceTrack AWS', 'region': 'ap-south-1'}
          
          with app.app_context():
              try:
                  db.create_all()
                  admin = User.query.filter_by(username='admin').first()
                  if not admin:
                      admin = User(username='admin')
                      admin.set_password('admin')
                      db.session.add(admin)
                      db.session.commit()
              except Exception as e:
                  print(f"Database error: {e}")
          
          if __name__ == '__main__':
              app.run(host='0.0.0.0', port=5000, debug=False)
          EOF
          
          # Configure nginx
          cat > /etc/nginx/sites-available/default << 'EOF'
          server {
              listen 80 default_server;
              server_name _;
              
              location / {
                  proxy_pass http://127.0.0.1:5000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              location /health {
                  proxy_pass http://127.0.0.1:5000/health;
              }
          }
          EOF
          
          # Start nginx
          systemctl restart nginx
          systemctl enable nginx
          
          # Start Flask application
          export DATABASE_URL="$DB_URL"
          cd /opt/tracetrack
          
          # Install systemd service
          cat > /etc/systemd/system/tracetrack.service << 'EOF'
          [Unit]
          Description=TraceTrack Flask Application
          After=network.target
          
          [Service]
          User=root
          WorkingDirectory=/opt/tracetrack
          Environment=DATABASE_URL=${DB_URL}
          ExecStart=/usr/local/bin/gunicorn --bind 127.0.0.1:5000 app:app
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          systemctl daemon-reload
          systemctl enable tracetrack
          systemctl start tracetrack
          
          echo "TraceTrack deployed successfully!" > /var/log/deployment-complete.log

Outputs:
  InstanceId:
    Description: Instance ID
    Value: !Ref TraceTrackInstance
  PublicIP:
    Description: Public IP Address
    Value: !GetAtt TraceTrackInstance.PublicIp
  WebsiteURL:
    Description: TraceTrack URL
    Value: !Sub 'http://${TraceTrackInstance.PublicIp}'