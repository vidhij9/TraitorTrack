AWSTemplateFormatVersion: '2010-09-09'
Description: 'TraceTrack Minimal AWS Deployment with CodeBuild'

Parameters:
  GitHubRepo:
    Type: String
    Default: 'TraceTrack'
    Description: GitHub repository name

Resources:
  # S3 Bucket for CodeBuild artifacts
  CodeBuildArtifacts:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'tracetrack-codebuild-artifacts-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # CodeBuild Service Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildServicePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub '${CodeBuildArtifacts}/*'
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                Resource: '*'

  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: tracetrack-build
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: S3
        Location: !Sub '${CodeBuildArtifacts}/artifacts'
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref 'AWS::Region'
          - Name: AWS_ACCOUNT_ID
            Value: !Ref 'AWS::AccountId'
          - Name: IMAGE_REPO_NAME
            Value: tracetrack
          - Name: IMAGE_TAG
            Value: latest
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - echo "FROM python:3.11-slim" > Dockerfile
                - echo "WORKDIR /app" >> Dockerfile
                - echo "COPY requirements.txt ." >> Dockerfile
                - echo "RUN pip install --no-cache-dir -r requirements.txt" >> Dockerfile
                - echo "COPY . ." >> Dockerfile
                - echo "EXPOSE 5000" >> Dockerfile
                - echo 'CMD ["gunicorn", "--bind", "0.0.0.0:5000", "main:app"]' >> Dockerfile
                - echo "flask" > requirements.txt
                - echo "gunicorn" >> requirements.txt
                - echo "psycopg2-binary" >> requirements.txt
                - echo "sqlalchemy" >> requirements.txt
                - echo "flask-sqlalchemy" >> requirements.txt
                - echo "print('Hello from TraceTrack!')" > main.py
                - echo "from flask import Flask" >> main.py
                - echo "app = Flask(__name__)" >> main.py
                - echo "@app.route('/health')" >> main.py
                - echo "def health(): return 'OK'" >> main.py
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

Outputs:
  ECRRepositoryURI:
    Description: ECR Repository URI
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/tracetrack'

  CodeBuildProjectName:
    Description: CodeBuild Project Name
    Value: !Ref CodeBuildProject