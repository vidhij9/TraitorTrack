AWSTemplateFormatVersion: '2010-09-09'
Description: 'CodeBuild to build TraceTrack Docker image'

Resources:
  # CodeBuild Service Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TraceTrackCodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildServicePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                Resource: '*'

  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: tracetrack-build
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref 'AWS::Region'
          - Name: AWS_ACCOUNT_ID
            Value: !Ref 'AWS::AccountId'
          - Name: IMAGE_REPO_NAME
            Value: tracetrack
          - Name: IMAGE_TAG
            Value: latest
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - |
                  cat > Dockerfile << 'EOF'
                  FROM python:3.11-slim
                  
                  WORKDIR /app
                  
                  # Install system dependencies including curl for health checks
                  RUN apt-get update && apt-get install -y \
                      curl \
                      && rm -rf /var/lib/apt/lists/*
                  
                  # Copy requirements and install Python packages
                  COPY requirements.txt .
                  RUN pip install --no-cache-dir -r requirements.txt
                  
                  # Copy application code
                  COPY . .
                  
                  # Expose port
                  EXPOSE 5000
                  
                  # Health check
                  HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
                      CMD curl -f http://localhost:5000/health || exit 1
                  
                  # Run application
                  CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "2", "--timeout", "60", "main:app"]
                  EOF
                - |
                  cat > requirements.txt << 'EOF'
                  flask==3.0.0
                  gunicorn==21.2.0
                  psycopg2-binary==2.9.7
                  SQLAlchemy==2.0.23
                  Flask-SQLAlchemy==3.1.1
                  redis==5.0.1
                  flask-login==0.6.3
                  werkzeug==3.0.1
                  requests==2.31.0
                  EOF
                - |
                  cat > main.py << 'EOF'
                  import os
                  from flask import Flask
                  
                  app = Flask(__name__)
                  
                  @app.route('/health')
                  def health():
                      return {'status': 'healthy', 'service': 'tracetrack'}
                  
                  @app.route('/')
                  def home():
                      return {'message': 'TraceTrack is running on AWS!', 'environment': os.environ.get('ENVIRONMENT', 'unknown')}
                  
                  if __name__ == '__main__':
                      app.run(host='0.0.0.0', port=5000)
                  EOF
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
                - echo Image pushed to $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

Outputs:
  CodeBuildProjectName:
    Description: CodeBuild Project Name
    Value: !Ref CodeBuildProject
    
  ImageURI:
    Description: Expected Docker Image URI
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/tracetrack:latest'