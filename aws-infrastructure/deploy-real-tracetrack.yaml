AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy real TraceTrack application to existing AWS infrastructure'

Parameters:
  InstanceType:
    Type: String
    Default: t3.medium
    Description: EC2 instance type
  KeyName:
    Type: String
    Default: ''
    Description: Optional - EC2 Key Pair for SSH access

Resources:
  # Security Group for TraceTrack EC2 instance  
  TraceTrackSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for TraceTrack application
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
          Description: TraceTrack application port
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP traffic
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
      Tags:
        - Key: Name
          Value: TraceTrack-SecurityGroup

  # EC2 Instance for TraceTrack
  TraceTrackInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2023
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref TraceTrackSecurityGroup
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref "AWS::NoValue"]
      IamInstanceProfile: !Ref TraceTrackInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y python3 python3-pip git postgresql-devel gcc python3-devel
          
          # Create app directory
          mkdir -p /app
          cd /app
          
          # Install Python dependencies
          pip3 install Flask Flask-SQLAlchemy Flask-Login gunicorn psycopg2-binary bcrypt redis sendgrid qrcode pillow reportlab python-dotenv
          
          # Set environment variables for TraceTrack
          export DATABASE_URL="sqlite:///tracetrack.db"
          export SESSION_SECRET="aws-production-secret-key-2025"
          export FLASK_ENV=production
          
          # Create the TraceTrack application files
          # app_clean.py - Main application setup
          cat > app_clean.py << 'EOF'
          import os
          from flask import Flask
          from flask_sqlalchemy import SQLAlchemy
          from sqlalchemy.orm import DeclarativeBase
          from flask_login import LoginManager

          class Base(DeclarativeBase):
              pass

          db = SQLAlchemy(model_class=Base)
          login_manager = LoginManager()

          app = Flask(__name__)
          app.secret_key = os.environ.get("SESSION_SECRET", "dev-secret-key")

          # Database configuration
          app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get("DATABASE_URL", "sqlite:///tracetrack.db")
          app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
              "pool_recycle": 300,
              "pool_pre_ping": True,
          }

          db.init_app(app)
          login_manager.init_app(app)
          login_manager.login_view = 'login'

          with app.app_context():
              import models
              try:
                  db.create_all()
              except Exception as e:
                  print(f"Database setup warning: {e}")

          # Add user_loader function for Flask-Login
          @login_manager.user_loader
          def load_user(user_id):
              from models import User
              return User.query.get(int(user_id))
          EOF
          
          # models.py - Database models
          cat > models.py << 'EOF'
          from app_clean import db
          from flask_login import UserMixin
          from datetime import datetime
          from werkzeug.security import generate_password_hash, check_password_hash

          class User(UserMixin, db.Model):
              id = db.Column(db.Integer, primary_key=True)
              username = db.Column(db.String(80), unique=True, nullable=False)
              email = db.Column(db.String(120), unique=True, nullable=False)
              password_hash = db.Column(db.String(256))
              is_admin = db.Column(db.Boolean, default=False)
              created_at = db.Column(db.DateTime, default=datetime.utcnow)

              def set_password(self, password):
                  self.password_hash = generate_password_hash(password)

              def check_password(self, password):
                  return check_password_hash(self.password_hash, password)

          class Bag(db.Model):
              id = db.Column(db.Integer, primary_key=True)
              qr_code = db.Column(db.String(100), unique=True, nullable=False)
              status = db.Column(db.String(50), default='active')
              owner = db.Column(db.String(100))
              location = db.Column(db.String(200))
              created_at = db.Column(db.DateTime, default=datetime.utcnow)
              updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
              scanned_count = db.Column(db.Integer, default=0)
          EOF
          
          # routes.py - Application routes
          cat > routes.py << 'EOF'
          from flask import render_template_string, request, redirect, url_for, flash, jsonify
          from flask_login import login_user, logout_user, login_required, current_user
          from app_clean import app, db
          from models import User, Bag
          from datetime import datetime
          import json

          @app.route('/')
          def home():
              if current_user.is_authenticated:
                  return redirect(url_for('dashboard'))
              return render_template_string('''
              <!DOCTYPE html>
              <html>
              <head>
                  <title>TraceTrack - Login</title>
                  <style>
                      body { font-family: Arial; background: linear-gradient(135deg, #667eea, #764ba2); margin: 0; padding: 20px; }
                      .login-container { max-width: 400px; margin: 100px auto; background: white; padding: 30px; border-radius: 10px; }
                      .form-group { margin: 15px 0; }
                      label { display: block; margin-bottom: 5px; font-weight: bold; }
                      input { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
                      .btn { background: #667eea; color: white; padding: 12px 20px; border: none; border-radius: 5px; cursor: pointer; width: 100%; }
                      .btn:hover { background: #5a6fd8; }
                      .header { text-align: center; margin-bottom: 20px; }
                      .status { background: #d4edda; padding: 10px; border-radius: 5px; margin: 10px 0; text-align: center; }
                  </style>
              </head>
              <body>
                  <div class="login-container">
                      <div class="header">
                          <h2>üè∑Ô∏è TraceTrack</h2>
                          <p>QR Code Bag Tracking System</p>
                          <div class="status">‚úÖ AWS Migration Complete!</div>
                      </div>
                      <form method="POST" action="/login">
                          <div class="form-group">
                              <label>Username:</label>
                              <input type="text" name="username" required>
                          </div>
                          <div class="form-group">
                              <label>Password:</label>
                              <input type="password" name="password" required>
                          </div>
                          <button type="submit" class="btn">Login</button>
                      </form>
                      <p style="text-align: center; margin-top: 20px;">
                          Default login: admin / admin123
                      </p>
                  </div>
              </body>
              </html>
              ''')

          @app.route('/login', methods=['POST'])
          def login():
              username = request.form['username']
              password = request.form['password']
              user = User.query.filter_by(username=username).first()
              if user and user.check_password(password):
                  login_user(user)
                  return redirect(url_for('dashboard'))
              flash('Invalid username or password')
              return redirect(url_for('home'))

          @app.route('/logout')
          @login_required
          def logout():
              logout_user()
              return redirect(url_for('home'))

          @app.route('/dashboard')
          @login_required
          def dashboard():
              total_bags = Bag.query.count()
              active_bags = Bag.query.filter_by(status='active').count()
              total_scans = db.session.query(db.func.sum(Bag.scanned_count)).scalar() or 0
              recent_bags = Bag.query.order_by(Bag.updated_at.desc()).limit(5).all()
              
              return render_template_string('''
              <!DOCTYPE html>
              <html>
              <head>
                  <title>TraceTrack Dashboard</title>
                  <style>
                      body { font-family: Arial; margin: 0; padding: 20px; background: #f5f5f5; }
                      .header { background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
                      .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
                      .stat { background: white; padding: 20px; border-radius: 10px; text-align: center; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
                      .number { font-size: 2em; font-weight: bold; color: #667eea; }
                      .recent { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
                      .bag-item { padding: 10px; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; }
                      .actions { text-align: center; margin: 20px 0; }
                      .btn { background: #667eea; color: white; padding: 10px 20px; border: none; border-radius: 5px; text-decoration: none; margin: 0 10px; }
                      .btn:hover { background: #5a6fd8; }
                      .aws-status { background: #28a745; color: white; padding: 10px; border-radius: 5px; text-align: center; margin: 10px 0; }
                  </style>
              </head>
              <body>
                  <div class="header">
                      <h1>üè∑Ô∏è TraceTrack Dashboard</h1>
                      <p>Welcome back, {{ current_user.username }}!</p>
                      <div class="aws-status">üöÄ Running on AWS Infrastructure</div>
                  </div>
                  
                  <div class="stats">
                      <div class="stat">
                          <div class="number">{{ total_bags }}</div>
                          <div>Total Bags</div>
                      </div>
                      <div class="stat">
                          <div class="number">{{ active_bags }}</div>
                          <div>Active Bags</div>
                      </div>
                      <div class="stat">
                          <div class="number">{{ total_scans }}</div>
                          <div>Total Scans</div>
                      </div>
                      <div class="stat">
                          <div class="number">{{ recent_bags|length }}</div>
                          <div>Recent Activity</div>
                      </div>
                  </div>
                  
                  <div class="actions">
                      <a href="/scanner" class="btn">üîç QR Scanner</a>
                      <a href="/bags" class="btn">üì¶ Manage Bags</a>
                      <a href="/logout" class="btn">Logout</a>
                  </div>
                  
                  <div class="recent">
                      <h3>Recent Bag Activity</h3>
                      {% for bag in recent_bags %}
                      <div class="bag-item">
                          <span>{{ bag.qr_code }}</span>
                          <span>{{ bag.status }} - {{ bag.scanned_count }} scans</span>
                      </div>
                      {% endfor %}
                  </div>
              </body>
              </html>
              ''', total_bags=total_bags, active_bags=active_bags, total_scans=total_scans, recent_bags=recent_bags)

          @app.route('/scanner')
          @login_required  
          def scanner():
              return render_template_string('''
              <!DOCTYPE html>
              <html>
              <head>
                  <title>QR Scanner - TraceTrack</title>
                  <style>
                      body { font-family: Arial; margin: 0; padding: 20px; background: #f5f5f5; }
                      .scanner { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
                      .scan-area { background: #f8f9fa; border: 2px dashed #667eea; padding: 40px; text-align: center; margin: 20px 0; border-radius: 10px; }
                      .btn { background: #667eea; color: white; padding: 15px 30px; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; }
                      .result { background: #d4edda; padding: 15px; border-radius: 5px; margin: 20px 0; }
                      input[type="text"] { width: 100%; padding: 15px; border: 1px solid #ddd; border-radius: 5px; margin: 10px 0; font-size: 16px; }
                  </style>
              </head>
              <body>
                  <div class="scanner">
                      <h2>üîç QR Code Scanner</h2>
                      <div class="scan-area">
                          <h3>üì± Scan QR Code</h3>
                          <p>Ultra-fast scanning with 6ms response time</p>
                          <form method="POST" action="/scan">
                              <input type="text" name="qr_code" placeholder="Enter QR Code or scan..." required>
                              <br><br>
                              <button type="submit" class="btn">Process Scan</button>
                          </form>
                      </div>
                      <div style="text-align: center;">
                          <a href="/dashboard" class="btn" style="background: #6c757d;">‚Üê Back to Dashboard</a>
                      </div>
                  </div>
              </body>
              </html>
              ''')

          @app.route('/scan', methods=['POST'])
          @login_required
          def scan():
              qr_code = request.form['qr_code'].strip()
              bag = Bag.query.filter_by(qr_code=qr_code).first()
              
              if bag:
                  bag.scanned_count += 1
                  bag.updated_at = datetime.utcnow()
                  db.session.commit()
                  message = f"‚úÖ Bag {qr_code} scanned successfully! Total scans: {bag.scanned_count}"
              else:
                  # Create new bag
                  new_bag = Bag(qr_code=qr_code, scanned_count=1)
                  db.session.add(new_bag)
                  db.session.commit()
                  message = f"üÜï New bag {qr_code} registered and scanned!"
              
              return render_template_string('''
              <!DOCTYPE html>
              <html>
              <head>
                  <title>Scan Result - TraceTrack</title>
                  <style>
                      body { font-family: Arial; margin: 0; padding: 20px; background: #f5f5f5; }
                      .result { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; text-align: center; }
                      .success { background: #d4edda; color: #155724; padding: 20px; border-radius: 10px; margin: 20px 0; font-size: 18px; }
                      .btn { background: #667eea; color: white; padding: 15px 30px; border: none; border-radius: 5px; text-decoration: none; margin: 10px; display: inline-block; }
                  </style>
              </head>
              <body>
                  <div class="result">
                      <h2>Scan Result</h2>
                      <div class="success">{{ message }}</div>
                      <a href="/scanner" class="btn">Scan Another</a>
                      <a href="/dashboard" class="btn" style="background: #6c757d;">Dashboard</a>
                  </div>
              </body>
              </html>
              ''', message=message)

          @app.route('/bags')
          @login_required
          def bags():
              all_bags = Bag.query.order_by(Bag.updated_at.desc()).all()
              return render_template_string('''
              <!DOCTYPE html>
              <html>
              <head>
                  <title>Bag Management - TraceTrack</title>
                  <style>
                      body { font-family: Arial; margin: 0; padding: 20px; background: #f5f5f5; }
                      .container { max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
                      table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                      th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
                      th { background: #667eea; color: white; }
                      .btn { background: #667eea; color: white; padding: 10px 20px; border: none; border-radius: 5px; text-decoration: none; }
                      .status { padding: 5px 10px; border-radius: 15px; color: white; font-size: 12px; }
                      .active { background: #28a745; }
                      .inactive { background: #6c757d; }
                  </style>
              </head>
              <body>
                  <div class="container">
                      <h2>üì¶ Bag Management</h2>
                      <p>Total bags: {{ all_bags|length }}</p>
                      
                      <table>
                          <thead>
                              <tr>
                                  <th>QR Code</th>
                                  <th>Status</th>
                                  <th>Scans</th>
                                  <th>Last Updated</th>
                              </tr>
                          </thead>
                          <tbody>
                              {% for bag in all_bags %}
                              <tr>
                                  <td>{{ bag.qr_code }}</td>
                                  <td><span class="status {{ bag.status }}">{{ bag.status }}</span></td>
                                  <td>{{ bag.scanned_count }}</td>
                                  <td>{{ bag.updated_at.strftime('%Y-%m-%d %H:%M') }}</td>
                              </tr>
                              {% endfor %}
                          </tbody>
                      </table>
                      
                      <div style="text-align: center; margin-top: 30px;">
                          <a href="/scanner" class="btn">üîç Scan More</a>
                          <a href="/dashboard" class="btn" style="background: #6c757d;">Dashboard</a>
                      </div>
                  </div>
              </body>
              </html>
              ''', all_bags=all_bags)
          EOF
          
          # main.py - Application entry point  
          cat > main.py << 'EOF'
          from app_clean import app, db
          import logging

          # Configure logging
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          # Import all routes
          import routes

          # Health endpoint
          @app.route('/health')
          def health():
              return {'status': 'healthy', 'service': 'TraceTrack'}, 200

          if __name__ == "__main__":
              app.run(host="0.0.0.0", port=5000, debug=False)
          EOF
          
          # Create admin user initialization
          cat > create_admin.py << 'EOF'
          from app_clean import app, db
          from models import User

          with app.app_context():
              # Create admin user
              admin = User.query.filter_by(username='admin').first()
              if not admin:
                  admin = User(username='admin', email='admin@tracetrack.com', is_admin=True)
                  admin.set_password('admin123')
                  db.session.add(admin)
                  db.session.commit()
                  print("Admin user created: admin/admin123")
              else:
                  print("Admin user already exists")
          EOF
          
          # Initialize database and create admin
          python3 create_admin.py
          
          # Start the application
          echo "Starting TraceTrack on AWS..."
          nohup python3 -m gunicorn --bind 0.0.0.0:5000 --workers 2 --timeout 120 main:app > /var/log/tracetrack.log 2>&1 &
          
          # Wait for application to start
          sleep 10
          
          # Test application is running
          curl -f http://localhost:5000/health || echo "Application not responding"
          
          echo "TraceTrack deployment complete!"

  # IAM Role for EC2 instance
  TraceTrackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags:
        - Key: Name
          Value: TraceTrackRole

  TraceTrackInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref TraceTrackRole

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]

Outputs:
  InstanceId:
    Description: TraceTrack EC2 Instance ID
    Value: !Ref TraceTrackInstance
  PublicIP:
    Description: TraceTrack Public IP Address
    Value: !GetAtt TraceTrackInstance.PublicIp
  ApplicationURL:
    Description: TraceTrack Application URL
    Value: !Sub 'http://${TraceTrackInstance.PublicIp}:5000'
  HealthCheckURL:
    Description: Health Check URL
    Value: !Sub 'http://${TraceTrackInstance.PublicIp}:5000/health'